{
  // 指定需要被编译的 ts 文件路径，** 表示任意目录，* 表示任意文件。也可用 webpack 指定
  "include": ["src/**/*"],

  // 编译器选项，最重要
  "compilerOptions": {
    // 编译后的 js 代码的版本
    // 'es3(default)', 'es5', 'es6', 'es2015', 'es2016', 'es2017', 'es2018', 'es2019', 'es2020', 'esnext'
    "target": "ES5",

    // 编译后的 js 代码中使用的模块化规范
    // 'none', 'commonjs', 'amd', 'system', 'umd', 'es6', 'es2015', 'es2020', 'esnext'
    "module": "ESNext",

    // 模块解析策略, node 或 classic
    "moduleResolution": "node",

    // 编译过程中需要引入的库文件的列表，比如在 node 中指定 dom。 浏览器下一般不使用
    "lib": ["DOM", "ESNext"],

    // 在 .tsx 文件里支持 JSX, 'preserve', 'react-native', 'react' or 'react-jsx'
    "jsx": "react-jsx",

    // 不生成输出文件
    "noEmit": true,

    // 将每个文件作为单独的模块（与“ts.transpileModule”类似）
    "isolatedModules": true,

    // 修复 TypeScript 转译中的这两个问题
    // https://www.typescriptlang.org/zh/tsconfig#esModuleInterop
    "esModuleInterop": true,

    // 以下四个选项的总开关，默认 false
    "strict": true,
    // 编译后的 js 文件是否开启严格模式，默认 false
    // "alwaysStrict": false
    // 不允许隐式的 any，默认 false
    // "noImplicitAny": false
    // 不允许没有指定类型的 this，默认 false
    // "noImplicitThis": false
    // 严格地检查空值，默认 false
    // "strictNullChecks": false

    // 跳过声明文件的类型检查
    "skipLibCheck": true,

    // 引用文件对大小写敏感
    "forceConsistentCasingInFileNames": true,

    // 支持 .json 文件为模块
    "resolveJsonModule": true

    // 允许引入 js 文件
    // "allowJs": true,

    // 与 allowJs 配合使用，当启用时，js 文件中会报告错误
    // "checkJs": true,
  }
}
